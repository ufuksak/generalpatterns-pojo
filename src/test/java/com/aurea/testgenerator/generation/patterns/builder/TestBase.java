package com.aurea.testgenerator.generation.patterns.builder;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.resolution.MethodUsage;
import com.github.javaparser.resolution.types.ResolvedType;
import com.github.javaparser.symbolsolver.JavaSymbolSolver;
import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver;
import java.util.Set;
import java.util.stream.Collectors;
import org.junit.Before;

class TestBase {

    private static String JAVA_CODE = "import java.util.List;"
            + "\n"
            + "public class Person {\n"
            + "\n"
            + "    private String firstName;\n"
            + "    private String lastName;\n"
            + "\n"
            + "    public String getFirstName() {\n"
            + "        return firstName;\n"
            + "    }\n"
            + "\n"
            + "    public void setFirstName(String firstName) {\n"
            + "        this.firstName = firstName;\n"
            + "    }\n"
            + "\n"
            + "    public String getLastName() {\n"
            + "        return lastName;\n"
            + "    }\n"
            + "\n"
            + "    public void setLastName(String lastName) {\n"
            + "        this.lastName = lastName;\n"
            + "    }\n"
            + "}"
            + "\n"
            + "public class Person2 {\n"
            + "\n"
            + "    private String firstName;\n"
            + "    private String lastName;\n"
            + "    private int numberOfChildren;\n"
            + "    private Long ssn;\n"
            + "    private Boolean alive = false;\n"
            + "    private Character gender;\n"
            + "    private Person2 relative;\n"
            + "    private List<Person2> relativesList;\n"
            + "    private Person2[] relativesArray;\n"
            + "\n"
            + "    private float index;\n"
            + "    private double incoming;\n"
            + "\n"
            + "    public String getFirstName() {\n"
            + "        return firstName;\n"
            + "    }\n"
            + "\n"
            + "    public void setFirstName(String firstName) {\n"
            + "        this.firstName = firstName;\n"
            + "    }\n"
            + "\n"
            + "    public String getLastName() {\n"
            + "        return lastName;\n"
            + "    }\n"
            + "\n"
            + "    public void setLastName(String lastName) {\n"
            + "        this.lastName = lastName;\n"
            + "    }\n"
            + "\n"
            + "    public int getNumberOfChildren() {\n"
            + "        return numberOfChildren;\n"
            + "    }\n"
            + "\n"
            + "    public void setNumberOfChildren(int numberOfChildren) {\n"
            + "        this.numberOfChildren = numberOfChildren;\n"
            + "    }\n"
            + "\n"
            + "    public Long getSsn() {\n"
            + "        return ssn;\n"
            + "    }\n"
            + "\n"
            + "    public void setSsn(Long ssn) {\n"
            + "        this.ssn = ssn;\n"
            + "    }\n"
            + "\n"
            + "    public Boolean isAlive() {\n"
            + "        return alive;\n"
            + "    }\n"
            + "\n"
            + "    public void setAlive(Boolean alive) {\n"
            + "        this.alive = alive;\n"
            + "    }\n"
            + "\n"
            + "    public Character getGender() {\n"
            + "        return gender;\n"
            + "    }\n"
            + "\n"
            + "    public void setGender(Character gender) {\n"
            + "        this.gender = gender;\n"
            + "    }\n"
            + "\n"
            + "    public Person2 getRelative() {\n"
            + "        return relative;\n"
            + "    }\n"
            + "\n"
            + "    public void setRelative(Person2 relative) {\n"
            + "        this.relative = relative;\n"
            + "    }\n"
            + "\n"
            + "    public List<Person2> getRelativesList() {\n"
            + "        return relativesList;\n"
            + "    }\n"
            + "\n"
            + "    public void setRelativesList(List<Person2> relativesList) {\n"
            + "        this.relativesList = relativesList;\n"
            + "    }\n"
            + "\n"
            + "    public Person2[] getRelativesArray() {\n"
            + "        return relativesArray;\n"
            + "    }\n"
            + "\n"
            + "    public void setRelativesArray(Person2[] relativesArray) {\n"
            + "        this.relativesArray = relativesArray;\n"
            + "    }\n"
            + "\n"
            + "    public float getIndex() {\n"
            + "        return index;\n"
            + "    }\n"
            + "\n"
            + "    public void setIndex(float index) {\n"
            + "        this.index = index;\n"
            + "    }\n"
            + "\n"
            + "    public double getIncoming() {\n"
            + "        return incoming;\n"
            + "    }\n"
            + "\n"
            + "    public void setIncoming(double incoming) {\n"
            + "        this.incoming = incoming;\n"
            + "    }\n"
            + "}\n"
            + "\n"
            + "public class PersonBuilder {\n"
            + "\n"
            + "    private String firstName;\n"
            + "    private String lastName;\n"
            + "\n"
            + "    public PersonBuilder firstName(String firstName) {\n"
            + "        this.firstName = firstName;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public PersonBuilder withFirstName(String firstName) {\n"
            + "        this.firstName = firstName;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public PersonBuilder lastName(String lastName) {\n"
            + "        this.lastName = lastName;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person build() {\n"
            + "        Person person = new Person();\n"
            + "        person.setFirstName(firstName);\n"
            + "        person.setLastName(lastName);\n"
            + "        return person;\n"
            + "    }\n"
            + "\n"
            + "}"
            + ""
            + "public class SomeBuilderWithNoBuilderSuffix {\n"
            + "\n"
            + "    private String firstName;\n"
            + "    private String lastName;\n"
            + "\n"
            + "    public PersonBuilder firstName(String firstName) {\n"
            + "        this.firstName = firstName;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public PersonBuilder lastName(String lastName) {\n"
            + "        this.lastName = lastName;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person build() {\n"
            + "        Person person = new Person();\n"
            + "        person.setFirstName(firstName);\n"
            + "        person.setLastName(lastName);\n"
            + "        return person;\n"
            + "    }\n"
            + "\n"
            + "}"
            + ""
            + "public class SomeClassWithNoBuildMethodBuilder {\n"
            + "\n"
            + "    private String firstName;\n"
            + "    private String lastName;\n"
            + "\n"
            + "    public PersonBuilder firstName(String firstName) {\n"
            + "        this.firstName = firstName;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public PersonBuilder lastName(String lastName) {\n"
            + "        this.lastName = lastName;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person buildThePojo() {\n"
            + "        Person person = new Person();\n"
            + "        person.setFirstName(firstName);\n"
            + "        person.setLastName(lastName);\n"
            + "        return person;\n"
            + "    }\n"
            + "\n"
            + "}"
            + ""
            + "public class SomeClassWithoutCorrespondingGettersBuilder {\n"
            + "\n"
            + "    private String firstName;\n"
            + "    private String lastName;\n"
            + "\n"
            + "    public PersonBuilder theFirstName(String firstName) {\n"
            + "        this.firstName = firstName;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public PersonBuilder theLastName(String lastName) {\n"
            + "        this.lastName = lastName;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person build() {\n"
            + "        Person person = new Person();\n"
            + "        person.setFirstName(firstName);\n"
            + "        person.setLastName(lastName);\n"
            + "        return person;\n"
            + "    }\n"
            + "\n"
            + "}\n"
            + "\n"
            + "public class Person2Builder {\n"
            + "\n"
            + "    private String firstName;\n"
            + "    private String lastName;\n"
            + "    private int numberOfChildren;\n"
            + "    private Long ssn;\n"
            + "    private Boolean alive = false;\n"
            + "    private Character gender;\n"
            + "    private Person2 relative;\n"
            + "    private List<Person2> relativesList;\n"
            + "    private Person2[] relativesArray;\n"
            + "\n"
            + "\n"
            + "    public Person2Builder firstName(String firstName) {\n"
            + "        this.firstName = firstName;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person2Builder lastName(String lastName) {\n"
            + "        this.lastName = lastName;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person2Builder numberOfChildren(int numberOfChildren) {\n"
            + "        this.numberOfChildren = numberOfChildren;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person2Builder ssn(Long ssn) {\n"
            + "        this.ssn = ssn;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person2Builder alive(Boolean alive) {\n"
            + "        this.alive = alive;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person2Builder gender(Character gender) {\n"
            + "        this.gender = gender;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person2Builder relative(Person2 relative) {\n"
            + "        this.relative = relative;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person2Builder someMethod(Person2 relative) {\n"
            + "        this.relative = relative;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person2 build() {\n"
            + "        Person2 person = new Person2();\n"
            + "        person.setFirstName(firstName);\n"
            + "        person.setLastName(lastName);\n"
            + "        person.setNumberOfChildren(numberOfChildren);\n"
            + "        person.setSsn(ssn);\n"
            + "        person.setAlive(alive);\n"
            + "        person.setGender(gender);\n"
            + "        person.setRelative(relative);\n"
            + "        person.setRelativesList(relativesList);\n"
            + "        person.setRelativesArray(relativesArray);\n"
            + "        return person;\n"
            + "    }\n"
            + "\n"
            + "    public Person2Builder relativesList(List<Person2> relativesList) {\n"
            + "        this.relativesList = relativesList;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public Person2Builder relativesArray(Person2[] relativesArray) {\n"
            + "        this.relativesArray = relativesArray;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public PersonBuilder index(float index) {\n"
            + "        this.index = index;\n"
            + "        return this;\n"
            + "    }\n"
            + "\n"
            + "    public PersonBuilder incoming(double incoming) {\n"
            + "        this.incoming = incoming;\n"
            + "        return this;\n"
            + "    }\n"
            + "}\n";

    protected CompilationUnit compilationUnit;

    @Before
    public void setUp() throws Exception {
        compilationUnit = JavaParser.parse(TestBase.JAVA_CODE);
        JavaSymbolSolver solver = new JavaSymbolSolver(new ReflectionTypeSolver(true));
        solver.inject(compilationUnit);
    }


    protected MethodDeclaration getBuilderMethod(ClassOrInterfaceDeclaration builderClass, String name) {
        return builderClass.getMethods().stream()
                .filter(method -> method.getName().asString().equals(name))
                .collect(Collectors.toList()).get(0);
    }

    protected Set<MethodUsage> getPojoMethods(ClassOrInterfaceDeclaration builderClass) {
        MethodDeclaration builder = getBuilderMethod(builderClass, "build");

        ResolvedType resolvedType = builder.getType().resolve();

        return resolvedType.asReferenceType()
                .getTypeDeclaration().getAllMethods();
    }

    protected ClassOrInterfaceDeclaration getBuilderClass() {
        return compilationUnit.findAll(ClassOrInterfaceDeclaration.class)
                .stream().filter(node -> !node.isInterface() && node.getNameAsString().equals("Person2Builder"))
                .collect(Collectors.toList()).get(0);
    }
}
